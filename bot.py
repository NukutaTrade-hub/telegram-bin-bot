import os
import csv
import aiohttp
import asyncio
import zipfile
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã BIN-–∫–æ–¥–æ–≤ –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞
bin_db = {}

def load_db():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤
        if not os.path.exists("full_bins.csv"):
            logger.info("–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤ full_bins.zip...")
            with zipfile.ZipFile("full_bins.zip", 'r') as zip_ref:
                zip_ref.extractall()
                logger.info("–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
        with open("full_bins.csv", newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                bin_db[row["BIN"]] = {
                    "Brand": row.get("Brand", "Unknown"),
                    "Issuer": row.get("Issuer", "Unknown"),
                    "CountryName": row.get("CountryName", "Unknown"),
                }
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bin_db)} BIN-–∫–æ–¥–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {str(e)}")
        raise  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
def get_card_scheme(bin_code: str) -> str:
    if not bin_code.isdigit() or len(bin_code) < 6:
        return "Unknown"

    first_digit = int(bin_code[0])
    first_two = int(bin_code[:2])
    first_four = int(bin_code[:4])

    if first_digit == 4:
        return "Visa"
    elif 51 <= first_two <= 55 or 2221 <= first_four <= 2720:
        return "MasterCard"
    elif 2200 <= first_four <= 2204:
        return "–ú–ò–†"
    else:
        return "Unknown"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (BIN), "
        "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –±–∞–Ω–∫, —Å—Ç—Ä–∞–Ω—É –∏ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>424242</code> ‚Üí —Ç–µ—Å—Ç–æ–≤—ã–π Visa",
        parse_mode="HTML"
    )

async def check_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    bin_code = text[:6] if text.isdigit() else ""

    if not bin_code or len(bin_code) < 6:
        await update.message.reply_text(
            "‚ùå –ù—É–∂–Ω–æ 6 —Ü–∏—Ñ—Ä. –ü—Ä–∏–º–µ—Ä: <code>424242</code>",
            parse_mode="HTML"
        )
        return

    brand = get_card_scheme(bin_code)
    issuer = "Unknown"
    country = "Unknown"

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
    if bin_code in bin_db:
        data = bin_db[bin_code]
        issuer = data.get("Issuer", issuer)
        country = data.get("CountryName", country)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API
        try:
            url = f"https://lookup.binlist.net/{bin_code}"
            headers = {"Accept-Version": "3"}
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=5) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        issuer = data.get("bank", {}).get("name", issuer)
                        country = data.get("country", {}).get("name", country)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")

    await update.message.reply_text(
        f"üí≥ <b>–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>: {brand}\n"
        f"üè¶ <b>–ë–∞–Ω–∫</b>: {issuer}\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞</b>: {country}",
        parse_mode="HTML"
    )

# Keep-Alive —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def keep_alive():
    app = web.Application()
    app.router.add_get("/", lambda request: web.Response(text="Bot is alive!"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("Keep-alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        load_db()
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É: {str(e)}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_card))

    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive
    asyncio.create_task(keep_alive())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
