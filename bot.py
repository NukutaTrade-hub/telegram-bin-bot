import os
import csv
import aiohttp
import asyncio
import zipfile
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑—ã BIN-–∫–æ–¥–æ–≤
bin_db = {}

def load_db():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã BIN-–∫–æ–¥–æ–≤ –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞"""
    try:
        csv_path = "full_bins.csv"
        if not os.path.exists(csv_path):
            logger.info("–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤ full_bins.zip...")
            with zipfile.ZipFile("full_bins.zip", 'r') as zip_ref:
                zip_ref.extractall()
                logger.info("–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω")
        
        with open(csv_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                bin_db[row["BIN"]] = {
                    "Brand": row.get("Brand", "Unknown"),
                    "Issuer": row.get("Issuer", "Unknown"),
                    "CountryName": row.get("CountryName", "Unknown"),
                }
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bin_db)} BIN-–∫–æ–¥–æ–≤")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {str(e)}")
        return False

def get_card_scheme(bin_code: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ BIN-–∫–æ–¥—É"""
    if not bin_code.isdigit() or len(bin_code) < 6:
        return "Unknown"

    first_digit = int(bin_code[0])
    first_two = int(bin_code[:2])
    first_four = int(bin_code[:4])

    if first_digit == 4:
        return "Visa"
    elif 51 <= first_two <= 55 or 2221 <= first_four <= 2720:
        return "MasterCard"
    elif 2200 <= first_four <= 2204:
        return "–ú–ò–†"
    return "Unknown"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üîç –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (BIN), "
        "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –±–∞–Ω–∫, —Å—Ç—Ä–∞–Ω—É –∏ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>424242</code> ‚Üí —Ç–µ—Å—Ç–æ–≤—ã–π Visa",
        parse_mode="HTML"
    )

async def check_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ BIN-–∫–æ–¥–∞"""
    text = update.message.text.strip()
    bin_code = text[:6] if text.isdigit() else ""

    if not bin_code or len(bin_code) < 6:
        await update.message.reply_text(
            "‚ùå –ù—É–∂–Ω–æ 6 —Ü–∏—Ñ—Ä. –ü—Ä–∏–º–µ—Ä: <code>424242</code>",
            parse_mode="HTML"
        )
        return

    brand = get_card_scheme(bin_code)
    issuer = "Unknown"
    country = "Unknown"

    if bin_code in bin_db:
        data = bin_db[bin_code]
        issuer = data.get("Issuer", issuer)
        country = data.get("CountryName", country)
    else:
        try:
            url = f"https://lookup.binlist.net/{bin_code}"
            headers = {"Accept-Version": "3"}
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, timeout=5) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        issuer = data.get("bank", {}).get("name", issuer)
                        country = data.get("country", {}).get("name", country)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")

    await update.message.reply_text(
        f"üí≥ <b>–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>: {brand}\n"
        f"üè¶ <b>–ë–∞–Ω–∫</b>: {issuer}\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞</b>: {country}",
        parse_mode="HTML"
    )

async def health_check(request):
    """HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    return web.Response(text="OK", status=200)

async def run_http_server(port):
    """–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    app = web.Application()
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    return runner

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not load_db():
        logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É BIN-–∫–æ–¥–æ–≤!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –°–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    temp_app = Application.builder().token(token).build()
    await temp_app.bot.delete_webhook(drop_pending_updates=True)
    await temp_app.shutdown()
    await asyncio.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
    port = int(os.environ.get("PORT", 8080))

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
    http_runner = await run_http_server(port)

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder() \
        .token(token) \
        .concurrent_updates(False) \
        .build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_card))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    try:
        while True:
            await asyncio.sleep(3600)
    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        await http_runner.cleanup()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
