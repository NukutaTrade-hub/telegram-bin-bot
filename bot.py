import csv
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ß–∏—Ç–∞–µ–º –±–∞–∑—É BIN –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
bin_db = {}
with open("bins_filtered.csv", newline="", encoding="utf-8") as f:
    reader = csv.DictReader(f)
    for row in reader:
        bin_db[row["BIN"]] = {
            "Brand": row["Brand"],
            "Issuer": row["Issuer"],
            "CountryName": row["CountryName"]
        }

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ BIN
def get_card_scheme(bin_code):
    first_digit = int(bin_code[0])
    first_two = int(bin_code[:2])
    first_four = int(bin_code[:4])
    
    if first_digit == 4:
        return "Visa"
    elif 51 <= first_two <= 55 or 2221 <= first_four <= 2720:
        return "MasterCard"
    elif 2200 <= first_four <= 2204:
        return "–ú–ò–†"
    else:
        return "Unknown"

# –§—É–Ω–∫—Ü–∏—è /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (Visa, MasterCard, –ú–ò–†), "
        "–∏ —è —Å–∫–∞–∂—É –±–∞–Ω–∫, —Å—Ç—Ä–∞–Ω—É –∏ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É.\n"
        "‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –±–µ—Ä—É —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä."
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
async def check_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card_number = update.message.text.strip().replace(" ", "")
    if not card_number.isdigit() or len(card_number) < 6:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.")
        return

    bin_code = card_number[:6]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    brand = get_card_scheme(bin_code)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
    if bin_code in bin_db:
        data = bin_db[bin_code]
        issuer = data.get("Issuer", "Unknown")
        country = data.get("CountryName", "Unknown")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ ‚Äî –∑–∞–ø—Ä–æ—Å –∫ API
        url = f"https://lookup.binlist.net/{bin_code}"
        headers = {"Accept-Version": "3"}
        try:
            response = requests.get(url, headers=headers, timeout=5)
            if response.status_code == 200:
                data_api = response.json()
                issuer = data_api.get("bank", {}).get("name", "Unknown")
                country = data_api.get("country", {}).get("name", "Unknown")
            else:
                issuer = "Unknown"
                country = "Unknown"
        except:
            issuer = "Unknown"
            country = "Unknown"

    result = (
        f"üí≥ Brand: {brand}\n"
        f"üè¶ Bank: {issuer}\n"
        f"üåç Country: {country}"
    )
    await update.message.reply_text(result)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    TOKEN = "8273272016:AAFoBAyO9CcmmuL_bcixf8jjHC8y33NUNEY"
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_card))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
